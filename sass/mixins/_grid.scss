/// <reference path="../_design-system.scss" />

@mixin make-container($gutters: $grid-gutter-widths) {
    position: relative;
    margin-left: auto;
    margin-right: auto;

    @each $breakpoint in map-keys($gutters) {
        @include breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);

            padding-right: $gutter / 2;
            padding-left: $gutter / 2;
        }
    }
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include breakpoint-up($breakpoint, $breakpoints) {
            width: $container-max-width;
            max-width: 100%;
        }
    }
}

@mixin make-gutters($gutters: $grid-gutter-widths) {
    @each $breakpoint in map-keys($gutters) {
        @include breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);

            padding-right: $gutter / 2;
            padding-left: $gutter / 2;
        }
    }
}

@mixin make-row($gutters: $grid-gutter-widths) {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint in map-keys($gutters) {
        @include breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);

            margin-right: $gutter / -2;
            margin-left: $gutter / -2;
            margin-bottom: $gutter;

            &:last-child {
                margin-bottom: 0;
            }
        }
    }
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);

    /// width: percentage($size / $columns);
    /// Add a `max-width` to ensure content within each column does not blow out
    /// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    /// do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-cell($content-spacing-button: false) {

    height: 100%;

    @if $content-spacing-button {
        display: flex;
        flex-direction: column;
        max-width: 100%;

        div {
            height: 100%;
            width: 100%;
            max-width: inherit;
        }

        .text-center {
            display: flex;
            align-items: center;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 1rem 0;

            img {
                height: 100%;
            }

            p {
                width: 100%;

                &:last-of-type {
                    flex: 1 1 auto;
                }
            }
        }
    }
}

@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
    %grid-column {
        position: relative;
        width: 100%;
        min-height: 1px;

        /// prevent columns from collapsing when empty
        @include make-gutters($gutters);
    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @for $i from 1 through $columns {
            .column#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }

        .column#{$infix} {
            @extend %grid-column;
        }

        @include breakpoint-up($breakpoint, $breakpoints) {
            .column#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .column#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
            }

            .column#{$infix}-first {
                order: -1;
            }
    
            .column#{$infix}-last {
                order: 1;
            }

            @for $i from 1 through $columns {
                .column#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }
        }


        @include breakpoint-only($breakpoint, $breakpoints) {
            $gutter: map-get($gutters, $breakpoint);
            $next: breakpoint-next($breakpoint, $breakpoints);

            @while $next != null {
                $next-infix: breakpoint-infix($next, $breakpoints);

                [class*="column#{$next-infix}"] {
                    margin-bottom: $gutter;

                    &:last-child {
                        margin-bottom: 0;
                    }
                }

                $next: breakpoint-next($next, $breakpoints);
            }

            .column#{$infix} {
                margin-bottom: 0;
            }

            .column#{$infix}-auto {
                margin-bottom: 0;
            }

            @for $i from 1 through $columns {
                .column#{$infix}-#{$i} {
                    margin-bottom: 0;
                }
            }
        }
    }
}
